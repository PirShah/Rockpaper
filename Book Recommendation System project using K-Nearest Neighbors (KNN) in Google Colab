
import pandas as pd
from sklearn.neighbors import NearestNeighbors


books = pd.read_csv('/content/Books.csv', encoding='latin-1')
ratings = pd.read_csv('/content/Ratings.csv', encoding='latin-1')
users = pd.read_csv('/content/Users.csv', encoding='latin-1')


ratings_with_books = ratings.merge(books, on='ISBN')

user_counts = ratings_with_books['User-ID'].value_counts()
ratings_filtered = ratings_with_books[ratings_with_books['User-ID'].isin(user_counts[user_counts >= 200].index)]

book_counts = ratings_filtered['Book-Title'].value_counts()

book_user_matrix = ratings_filtered.pivot_table(index='Book-Title', columns='User-ID', values='Book-Rating')
book_user_matrix.fillna(0, inplace=True)


model = NearestNeighbors(metric='cosine', algorithm='brute')
model.fit(book_user_matrix.values)


def get_recommends(book="The Queen of the Damned (Vampire Chronicles (Paperback))"):
    if book not in book_user_matrix.index:
        return [book, []]

    index = book_user_matrix.index.get_loc(book)
    distances, indices = model.kneighbors([book_user_matrix.iloc[index].values], n_neighbors=6)

    recommended = []
    for i in range(1, len(distances[0])):  # skip the first one (it's the book itself)
        recommended.append([book_user_matrix.index[indices[0][i]], distances[0][i]])

    return [book, recommended]


book_name = "The Queen of the Damned (Vampire Chronicles (Paperback))"
recommended_books = get_recommends(book_name)


print("Input Book:", recommended_books[0])
print("Recommended Books:")
for rec in recommended_books[1]:
    print(f"{rec[0]} (Similarity Score: {round(1 - rec[1], 3)})")  # 1 - distance to show similarity
